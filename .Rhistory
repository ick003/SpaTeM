# Updating z
MuG = Mu
if(!is.null(Bds)){vois = getCanStatF(Bds, zz.temp, nComp)}else{
vois = matrix(0, nSites, nComp)
}
YpComp = crossprod_simple_triplet_matrix(t(Btilde),alphaHist[t,,])
if(nSpTCov == nComp){
YpComp = YpComp + matrix(gammaHist[t,], ncol = nSpTCov, nrow = nrow(YpComp), byrow = T)
}
piCurr = matrix(piHist[t-1,,], nrow = nComp)
zObs = NULL
logProb = matrix(NA, nSites, nComp)
for(i in 1:nSites){
idxID = which(y$ID == ID[i])
zObsProb = NULL
for(j in 1:nComp){
logProb[i,j] = sum(dnorm(MuG[idxID], YpComp[idxID,j], sigma2Hist[t], log=T), na.rm=T)* sqrt(2*pi*sigma2Hist[t]) + rhoHist[t] * vois[i,j]
#if(sum(zCurr[j,])==0){logProb[i,j] = 0}
zObsProb = cbind(zObsProb, (dnorm(MuG[idxID], YpComp[idxID,j], sigma2Hist[t], log=T)* sqrt(2*pi*sigma2Hist[t]) + t(log(piCurr))[i,j]))
}
zObs = rbind(zObs, rowSums(matrix(apply(exp(zObsProb), 1, function(x) rmultinom(1,1,x)), nrow = nComp)))
}
piCurr = matrix(piHist[t-1,,], nrow = nComp)
logProb = logProb + t(log(piCurr))
mlogProb = matrix(apply(logProb ,1, function(x) x - max(x, na.rm=T)), ncol=nComp, byrow=T)
fProb = matrix(apply(mlogProb ,1, function(x) exp(x)/ sum(exp(x))), ncol=nComp, byrow=T)
z.Num = apply(fProb,1, function(x) sample(1:nComp,1,prob = x))
zHist[t,,] <- apply(fProb, 1, function(x) rmultinom(1,1,x))
# Updating pi
tempAlpha=NULL
for(i in 1:nSites){
#browser()
alpha = priors$pi$alpha0[i,] + zObs[i,]#zHist[t,,i]
piHist[t,,i] = bayesm::rdirichlet(c(as.matrix(alpha)))
tempAlpha = rbind(tempAlpha, alpha)
}
# Likelihood
LogL = sum(dnorm(Ypp, Mu, sigma2Hist[t], log = T))
# p(alpha)
prAlpha = 0
for(j in 1:nComp){
alphaPostMu = matrix(rep(priors$alpha$m0, length(alphaPostMu)), ncol=1)
alphaPostSd = diag(rep(priors$alpha$s0, length(alphaPostMu)))
if(priors$alpha$constrained){
# Using Rue2005
nConst = 1 #nBasis
A = matrix(0,nrow = nConst, ncol = length(alphaPostMu))
for(cA in 1:(nConst)){
A[cA,basis$idx[[cA]]] = colMeans(basisSplines)[basis$idx[[cA]]]
}
e = matrix(0,ncol=1, nrow=nConst)
muAlphaC = alphaPostMu - solve(alphaPostSd) %*% t(A) %*% solve(A %*% solve(alphaPostSd) %*% t(A)) %*% (A %*% alphaPostMu - e)
sigAlphaC = solve(alphaPostSd) - solve(alphaPostSd) %*% t(A) %*% solve(A %*% solve(alphaPostSd) %*% t(A)) %*% A %*% solve(alphaPostSd)
EVD = eigen(sigAlphaC)
iEV = 1 / EVD$values
iEV[EVD$values < 1e-300] = 0
SigM = EVD$vectors %*% diag(iEV) %*% t(EVD$vectors)
prAlphaT   =  -(length(alphaHist[t,,j])-1)/2 * log(2*pi) -
1/2*t(alphaHist[t,,j]- muAlphaC)%*% SigM %*%  (alphaHist[t,,j]- muAlphaC) -
1/2*sum(log(EVD$values[EVD$values > 1e-300]))
}else{
prAlphaT   = sum(mvtnorm::dmvnorm(alphaHist[t,,j], alphaPostMu, alphaPostSd, log=T))
}
prAlpha = prAlpha + prAlphaT
}
# p(beta)
betaPostMu = matrix(rep(priors$beta$m0, length(betaPostMu)), ncol=1)
betaPostSd = diag(rep(priors$beta$s0, length(betaPostMu)))
if(priors$beta$constrained){
# Using Rue2005
Ab = kronecker(zCurr, diag(2))
idxNC = which(rowSums(Ab)==0)
if(length(idxNC)>0){
Ab = matrix(Ab[-idxNC,], ncol = nSites*nBasis)
}
eb = matrix(rowSums(Ab),ncol=1, nrow=nrow(Ab))
# New cond dist parameters
muBetaC = betaPostMu - solve(betaPostSd) %*% t(Ab) %*% solve(Ab %*% solve(betaPostSd) %*% t(Ab)) %*% (Ab %*% betaPostMu - eb)
sigBetaC = solve(betaPostSd) - solve(betaPostSd) %*% t(Ab) %*% solve(Ab %*% solve(betaPostSd) %*% t(Ab)) %*% Ab %*% solve(betaPostSd)
EVD_beta = eigen(sigBetaC/2 + t(sigBetaC)/2)
iEV_beta = 1 / EVD_beta$values
iEV_beta[EVD_beta$values <= 0] = 0
SigBM = EVD_beta$vectors %*% diag(iEV_beta) %*% t(EVD_beta$vectors)
prBeta   =  -(length(betaHist[t,])-1)/2 * log(2*pi) -
1/2*t(betaHist[t,]- muBetaC)%*% SigBM %*%  (betaHist[t,]- muBetaC) -
1/2*sum(log(EVD_beta$values[EVD_beta$values > 1e-300]))
}else{
prBeta   = sum(mvtnorm::dmvnorm(betaHist[t,], betaPostMu, betaPostSd, log=T))
}
# p(gamma)
prGamma = sum(dnorm(gammaHist[t,], priors$gamma$m0, priors$gamma$s0, log=T))
# p(sigma), p(tau), p(phi), p(rho)
prSigma2 = sum(dgamma(sigma2Hist[t], priors$sigma2$b0, priors$sigma2$a0, log=T))
prTau = sum(dgamma(tauHist[t] ,priors$tau$a0, priors$tau$b0, log=T))
prPhi = sum(log(dunif(phiHist[t], priors$phi$inf, priors$phi$sup)))
prRho = sum(log(dunif(rhoHist[t], priors$rho$inf, priors$rho$sup)))
# p(z | pi, rho), p(pi)
tempAlpha[tempAlpha==0] = 1e-6
prPi = prZ = 0
for(i in 1:nSites){
isZero = which(round(piHist[t,,i],5) > 0)
prPi = prPi + sum(log(mixtools::ddirichlet(matrix(round(piHist[t,isZero,i],5), ncol = length(isZero)), alpha = tempAlpha[i,isZero])))
prZ = prZ + log(fProb[i,which.max(zHist[t,,i])])
}
logPostDist[t] = LogL + prBeta + prGamma + prAlpha +
prSigma2 + prTau + prPhi+ prPi + prZ + prRho + prPi
logLike[t] = LogL
source("./R/functions.R")
df.sptmod = SPTModel(df.sptm = df, coordinates = subCoords.df, SpTcov = NULL)
pi0 = as.matrix(subLandUse.df)
pi0 = pi0#[,-c(4:6)]/ rowSums(pi0[,-c(4:6)])
set.seed(1)
ResGibbsM = estimGibbs(df.sptmod, priors = list(beta = list(m0 = 1, s0 = 0.1, dist = "gauss", constrained =T),
alpha = list(m0 = 0, s0 = 2, dist = "gauss", constrained = F),
gamma = list(m0 = 0, s0 = 0.1, dist = "gauss"),
sigma2 = list(a0=2, b0=1, dist = "igamma"),
tau = list(a0 = 5, b0= 1, dist = "igamma"),
phi = list(inf = 0.1, sup = 50, dist = "unif"),
tauT = list(a0 = 2, b0= 1, dist = "gamma"),
phiT = list(inf = 0.1, sup = 0.8, dist = "unif"),
pi = list(alpha0 = pi0, dist = "dirichlet"),
rho=list(inf=2, sup = 3, dist="unif")),
N.run = 2500, debug = F, tempRE = "notcorr", model = "simpleMixture",
print.res = T, nBatch = 3,
parallel = F, nCluster = ncol(pi0))
mcmcChain = sptmRes2mcmc(ResGibbsM)
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsM, 187)
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsM, 185:188)
gelman.diag(mcmcChain)
nRun = nrow(ResGibbsM$GibbsOut$theta$rhoH)
round(apply(ResGibbsM$GibbsOut$theta$zH[round(4*nRun/5):nRun,,,1],c(2,3),mean),2)
round(apply(ResGibbsM$GibbsOut$theta$piH[round(4*nRun/5):nRun,,,1],c(2,3),mean),2)
predData = df$obs.data
predData$yP =  colMeans(ResGibbsM$GibbsOut$yHat[-1,,1])
predData$CI025 = apply(ResGibbsM$GibbsOut$yHat[-1,,1],2,quantile,0.025)
predData$CI975 = apply(ResGibbsM$GibbsOut$yHat[-1,,1],2,quantile,0.975)
predData$yPp =  colMeans(predictSPTM(ResGibbsM, keepRun = 1500:2500)$YpwN)
Cldf = data.frame(ID = rownames(pi0),Cluster = apply(t(apply(ResGibbsM$GibbsOut$theta$zH[1500:2500,,,1],c(2,3),mean)),1,which.max))
predData = merge(predData, Cldf, by  ="ID", all.x = TRUE)
SSE_M = sqrt(sum((predData$obs - predData$yP)^2))
plotSPTM(ResGibbsM, "tempBasis", keepRun = round(3*nRun/4):nRun)
plotSPTM(ResGibbsM, "tempBasis", keepRun = round(3*nRun/4):nRun)
plotSPTM(ResGibbsM, "spatialBasis")
plotSPTM(ResGibbsM, "hyperparameter", keepRun = round(4*nRun/5):nRun)
plotSPTM(ResGibbsM, "residuals")
plotSPTM(ResGibbsM, "covariates", keepRun = round(4*nRun/5):nRun)
plotSPTM(ResGibbsM, "cluster", keepRun =round(4*nRun/5):nRun)
ggplot(data = predData[predData$Cluster %in% c(1:7),], aes(x = date, y = obs, col = ID)) + geom_point() + geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
set.seed(1)
ResGibbsM = estimGibbs(df.sptmod, priors = list(beta = list(m0 = 1, s0 = 0.1, dist = "gauss", constrained =T),
alpha = list(m0 = 0, s0 = 2, dist = "gauss", constrained = T),
gamma = list(m0 = 0, s0 = 0.1, dist = "gauss"),
sigma2 = list(a0=2, b0=1, dist = "igamma"),
tau = list(a0 = 5, b0= 1, dist = "igamma"),
phi = list(inf = 0.1, sup = 50, dist = "unif"),
tauT = list(a0 = 2, b0= 1, dist = "gamma"),
phiT = list(inf = 0.1, sup = 0.8, dist = "unif"),
pi = list(alpha0 = pi0, dist = "dirichlet"),
rho=list(inf=2, sup = 3, dist="unif")),
N.run = 2500, debug = F, tempRE = "notcorr", model = "simpleMixture",
print.res = T, nBatch = 3,
parallel = F, nCluster = ncol(pi0))
mcmcChain = sptmRes2mcmc(ResGibbsM, 185:188)
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsM, c(17,185:188))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsM, c(17,33,185:188))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsM, c(17,33,49,185:188))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsM, c(17,33,49,65,185:188))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsM, c(17,33,49,65,93,185:188))
gelman.diag(mcmcChain)
nRun = nrow(ResGibbsM$GibbsOut$theta$rhoH)
predData = df$obs.data
predData$yP =  colMeans(ResGibbsM$GibbsOut$yHat[-1,,1])
predData$CI025 = apply(ResGibbsM$GibbsOut$yHat[-1,,1],2,quantile,0.025)
predData$CI975 = apply(ResGibbsM$GibbsOut$yHat[-1,,1],2,quantile,0.975)
predData$yPp =  colMeans(predictSPTM(ResGibbsM, keepRun = 1500:2500)$YpwN)
Cldf = data.frame(ID = rownames(pi0),Cluster = apply(t(apply(ResGibbsM$GibbsOut$theta$zH[1500:2500,,,1],c(2,3),mean)),1,which.max))
predData = merge(predData, Cldf, by  ="ID", all.x = TRUE)
SSE_M = sqrt(sum((predData$obs - predData$yP)^2))
df.sptmod = SPTModel(df.sptm = df, coordinates = subCoords.df, SpTcov = NULL)
pi0 = as.matrix(subLandUse.df)
set.seed(1)
ResGibbsMS = estimGibbs(df.sptmod, priors = list(beta = list(m0 = 1, s0 = 0.1, dist = "gauss", constrained =F),
alpha = list(m0 = 0, s0 = 2, dist = "gauss", constrained = F),# converged with F
gamma = list(m0 = 0, s0 = 0.1, dist = "gauss"),
sigma2 = list(a0=2, b0=1, dist = "gamma"),
tau = list(a0 = 5, b0= 1, dist = "gamma"),
phi = list(inf = 0.1, sup = 50, dist = "unif"),
tauT = list(a0 = 2, b0= 1, dist = "gamma"),
phiT = list(inf = 0.1, sup = 0.8, dist = "unif"),
pi = list(alpha0 = pi0, dist = "dirichlet"),
rho=list(inf=2, sup = 3, dist="unif")),
N.run = 2500, debug = F, model = "spatialMixture",tempRE = "notcorr",
print.res = T, nBatch = 3,
parallel = F, nCluster = ncol(pi0))
mcmcChain = sptmRes2mcmc(ResGibbsMS)
gelman.diag(mcmcChain)
nRun = nrow(ResGibbsM$GibbsOut$theta$rhoH)
predData = df$obs.data
predData$yP =  colMeans(ResGibbsMS$GibbsOut$yHat[-1,,1])
predData$CI025 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.025)
predData$CI975 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.975)
predData$yPp =  colMeans(predictSPTM(ResGibbsM, keepRun = 1500:2500)$YpwN)
Cldf = data.frame(ID = rownames(pi0),Cluster = apply(t(apply(ResGibbsMS$GibbsOut$theta$zH[1500:2500,,,1],c(2,3),mean)),1,which.max))
predData = merge(predData, Cldf, by  ="ID", all.x = TRUE)
SSE_MS = sqrt(sum((predData$obs - predData$yP)^2))
ggplot(data = predData[predData$Cluster %in% c(1:7),], aes(x = date, y = obs, col = ID)) + geom_point() + geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point() + geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
plotSPTM(ResGibbsMS, "cluster", keepRun =round(4*nRun/5):nRun)
df.sptmod = SPTModel(df.sptm = df, coordinates = subCoords.df, SpTcov = NULL)
pi0 = as.matrix(subLandUse.df)
set.seed(1)
ResGibbsMS = estimGibbs(df.sptmod, priors = list(beta = list(m0 = 1, s0 = 0.1, dist = "gauss", constrained =F),
alpha = list(m0 = 0, s0 = 2, dist = "gauss", constrained = T),# converged with F
gamma = list(m0 = 0, s0 = 0.1, dist = "gauss"),
sigma2 = list(a0=2, b0=1, dist = "gamma"),
tau = list(a0 = 5, b0= 1, dist = "gamma"),
phi = list(inf = 0.1, sup = 50, dist = "unif"),
tauT = list(a0 = 2, b0= 1, dist = "gamma"),
phiT = list(inf = 0.1, sup = 0.8, dist = "unif"),
pi = list(alpha0 = pi0, dist = "dirichlet"),
rho=list(inf=2, sup = 3, dist="unif")),
N.run = 2500, debug = F, model = "spatialMixture",tempRE = "notcorr",
print.res = T, nBatch = 3,
parallel = F, nCluster = ncol(pi0))
mcmcChain = sptmRes2mcmc(ResGibbsMS)
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, 17)
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,28))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,28,44))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,28,44,60))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,28,44,60,98))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,28,44,60,98,109))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,28,44,60,98,109,125))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,28,44,60,98,109,125, 141))
gelman.diag(mcmcChain)
nRun = nrow(ResGibbsM$GibbsOut$theta$rhoH)
predData = df$obs.data
predData$yP =  colMeans(ResGibbsMS$GibbsOut$yHat[-1,,1])
predData$CI025 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.025)
predData$CI975 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.975)
predData$yPp =  colMeans(predictSPTM(ResGibbsM, keepRun = 1500:2500)$YpwN)
Cldf = data.frame(ID = rownames(pi0),Cluster = apply(t(apply(ResGibbsMS$GibbsOut$theta$zH[1500:2500,,,1],c(2,3),mean)),1,which.max))
predData = merge(predData, Cldf, by  ="ID", all.x = TRUE)
SSE_MS = sqrt(sum((predData$obs - predData$yP)^2))
df.sptmod = SPTModel(df.sptm = df, coordinates = subCoords.df, SpTcov = NULL)
pi0 = as.matrix(subLandUse.df)
set.seed(1)
ResGibbsMS = estimGibbs(df.sptmod, priors = list(beta = list(m0 = 1, s0 = 0.1, dist = "gauss", constrained =T),
alpha = list(m0 = 0, s0 = 2, dist = "gauss", constrained = F),# converged with F
gamma = list(m0 = 0, s0 = 0.1, dist = "gauss"),
sigma2 = list(a0=2, b0=1, dist = "gamma"),
tau = list(a0 = 5, b0= 1, dist = "gamma"),
phi = list(inf = 0.1, sup = 50, dist = "unif"),
tauT = list(a0 = 2, b0= 1, dist = "gamma"),
phiT = list(inf = 0.1, sup = 0.8, dist = "unif"),
pi = list(alpha0 = pi0, dist = "dirichlet"),
rho=list(inf=2, sup = 3, dist="unif")),
N.run = 2500, debug = F, model = "spatialMixture",tempRE = "notcorr",
print.res = T, nBatch = 3,
parallel = F, nCluster = ncol(pi0))
mcmcChain = sptmRes2mcmc(ResGibbsMS)
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(186))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(185))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(185:187))
gelman.diag(mcmcChain)
nRun = nrow(ResGibbsM$GibbsOut$theta$rhoH)
predData = df$obs.data
predData$yP =  colMeans(ResGibbsMS$GibbsOut$yHat[-1,,1])
predData$CI025 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.025)
predData$CI975 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.975)
predData$yPp =  colMeans(predictSPTM(ResGibbsM, keepRun = 1500:2500)$YpwN)
Cldf = data.frame(ID = rownames(pi0),Cluster = apply(t(apply(ResGibbsMS$GibbsOut$theta$zH[1500:2500,,,1],c(2,3),mean)),1,which.max))
predData = merge(predData, Cldf, by  ="ID", all.x = TRUE)
SSE_MS = sqrt(sum((predData$obs - predData$yP)^2))
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point() + geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
df.sptmod = SPTModel(df.sptm = df, coordinates = subCoords.df, SpTcov = NULL)
pi0 = as.matrix(subLandUse.df)
set.seed(1)
ResGibbsMS = estimGibbs(df.sptmod, priors = list(beta = list(m0 = 1, s0 = 0.1, dist = "gauss", constrained =T),
alpha = list(m0 = 0, s0 = 2, dist = "gauss", constrained = T),# converged with F
gamma = list(m0 = 0, s0 = 0.1, dist = "gauss"),
sigma2 = list(a0=2, b0=1, dist = "gamma"),
tau = list(a0 = 5, b0= 1, dist = "gamma"),
phi = list(inf = 0.1, sup = 50, dist = "unif"),
tauT = list(a0 = 2, b0= 1, dist = "gamma"),
phiT = list(inf = 0.1, sup = 0.8, dist = "unif"),
pi = list(alpha0 = pi0, dist = "dirichlet"),
rho=list(inf=2, sup = 3, dist="unif")),
N.run = 2500, debug = F, model = "spatialMixture",tempRE = "notcorr",
print.res = T, nBatch = 3,
parallel = F, nCluster = ncol(pi0))
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(185:187))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,185:187))
gelman.diag(mcmcChain)
gelman.plot(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,185:187))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,185:187))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,185:187))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,185:187))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,185:187))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,142,185:187))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,142,146,185:187))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,142:146,185:187))
gelman.diag(mcmcChain)
nRun = nrow(ResGibbsM$GibbsOut$theta$rhoH)
predData = df$obs.data
predData$yP =  colMeans(ResGibbsMS$GibbsOut$yHat[-1,,1])
predData$CI025 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.025)
predData$CI975 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.975)
predData$yPp =  colMeans(predictSPTM(ResGibbsM, keepRun = 1500:2500)$YpwN)
Cldf = data.frame(ID = rownames(pi0),Cluster = apply(t(apply(ResGibbsMS$GibbsOut$theta$zH[1500:2500,,,1],c(2,3),mean)),1,which.max))
predData = merge(predData, Cldf, by  ="ID", all.x = TRUE)
SSE_MS = sqrt(sum((predData$obs - predData$yP)^2))
plotSPTM(ResGibbsMS, "tempBasis")
plotSPTM(ResGibbsMS, "spatialBasis")
plotSPTM(ResGibbsMS, "hyperparameter", keepRun =round(4*nRun/5):nRun)
plotSPTM(ResGibbsMS, "prediction")
plotSPTM(ResGibbsMS, "residuals")
plotSPTM(ResGibbsMS, "covariates")
plotSPTM(ResGibbsMS, "cluster", keepRun =round(4*nRun/5):nRun)
Cldf
table(Cldf)
table(Cldf$Cluster)
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point() + geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
df.sptmod = SPTModel(df.sptm = df, coordinates = subCoords.df, SpTcov = NULL)
pi0 = as.matrix(subLandUse.df)
set.seed(1)
ResGibbsMS = estimGibbs(df.sptmod, priors = list(beta = list(m0 = 1, s0 = 0.1, dist = "gauss", constrained =T),
alpha = list(m0 = 0, s0 = 2, dist = "gauss", constrained = F),# converged with F
gamma = list(m0 = 0, s0 = 0.1, dist = "gauss"),
sigma2 = list(a0=2, b0=1, dist = "gamma"),
tau = list(a0 = 5, b0= 1, dist = "gamma"),
phi = list(inf = 0.1, sup = 50, dist = "unif"),
tauT = list(a0 = 2, b0= 1, dist = "gamma"),
phiT = list(inf = 0.1, sup = 0.8, dist = "unif"),
pi = list(alpha0 = pi0, dist = "dirichlet"),
rho=list(inf=2, sup = 3, dist="unif")),
N.run = 2500, debug = F, model = "spatialMixture",tempRE = "notcorr",
print.res = T, nBatch = 3,
parallel = F, nCluster = ncol(pi0))
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,180))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,179))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,178))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,178:180))
gelman.diag(mcmcChain)
predData = df$obs.data
predData$yP =  colMeans(ResGibbsMS$GibbsOut$yHat[-1,,1])
predData$CI025 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.025)
predData$CI975 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.975)
predData$yPp =  colMeans(predictSPTM(ResGibbsM, keepRun = 1500:2500)$YpwN)
Cldf = data.frame(ID = rownames(pi0),Cluster = apply(t(apply(ResGibbsMS$GibbsOut$theta$zH[1500:2500,,,1],c(2,3),mean)),1,which.max))
predData = merge(predData, Cldf, by  ="ID", all.x = TRUE)
SSE_MS = sqrt(sum((predData$obs - predData$yP)^2))
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point() + geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
plotSPTM(ResGibbsMS, "cluster", keepRun =round(4*nRun/5):nRun)
plotSPTM(ResGibbsMS, "hyperparameter", keepRun =round(4*nRun/5):nRun)
pi0
apply(pi0,1,max)
apply(pi0,2,max)
pi0 = as.matrix(subLandUse.df)[,-1]
set.seed(1)
ResGibbsMS = estimGibbs(df.sptmod, priors = list(beta = list(m0 = 1, s0 = 0.1, dist = "gauss", constrained =T),
alpha = list(m0 = 0, s0 = 2, dist = "gauss", constrained = F),# converged with F
gamma = list(m0 = 0, s0 = 0.1, dist = "gauss"),
sigma2 = list(a0=2, b0=1, dist = "gamma"),
tau = list(a0 = 5, b0= 1, dist = "gamma"),
phi = list(inf = 0.1, sup = 50, dist = "unif"),
tauT = list(a0 = 2, b0= 1, dist = "gamma"),
phiT = list(inf = 0.1, sup = 0.8, dist = "unif"),
pi = list(alpha0 = pi0, dist = "dirichlet"),
rho=list(inf=2, sup = 3, dist="unif")),
N.run = 2500, debug = F, model = "spatialMixture",tempRE = "notcorr",
print.res = T, nBatch = 3,
parallel = F, nCluster = ncol(pi0))
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,178:180))
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(17,50,95,99,110,126,164,178:180))
gelman.diag(mcmcChain)
nRun = nrow(ResGibbsM$GibbsOut$theta$rhoH)
predData = df$obs.data
predData$yP =  colMeans(ResGibbsMS$GibbsOut$yHat[-1,,1])
predData$CI025 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.025)
predData$CI975 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.975)
predData$yPp =  colMeans(predictSPTM(ResGibbsM, keepRun = 1500:2500)$YpwN)
Cldf = data.frame(ID = rownames(pi0),Cluster = apply(t(apply(ResGibbsMS$GibbsOut$theta$zH[1500:2500,,,1],c(2,3),mean)),1,which.max))
predData = merge(predData, Cldf, by  ="ID", all.x = TRUE)
SSE_MS = sqrt(sum((predData$obs - predData$yP)^2))
pi0 = as.matrix(subLandUse.df)
df.sptmod = SPTModel(df.sptm = df, coordinates = subCoords.df, SpTcov = NULL)
pi0 = as.matrix(subLandUse.df)
set.seed(1)
ResGibbsMS = estimGibbs(df.sptmod, priors = list(beta = list(m0 = 1, s0 = 0.1, dist = "gauss", constrained =T),
alpha = list(m0 = 0, s0 = 2, dist = "gauss", constrained = F),# converged with F
gamma = list(m0 = 0, s0 = 0.1, dist = "gauss"),
sigma2 = list(a0=2, b0=1, dist = "gamma"),
tau = list(a0 = 5, b0= 1, dist = "gamma"),
phi = list(inf = 0.1, sup = 50, dist = "unif"),
tauT = list(a0 = 2, b0= 1, dist = "gamma"),
phiT = list(inf = 0.1, sup = 0.8, dist = "unif"),
pi = list(alpha0 = pi0, dist = "dirichlet"),
rho=list(inf=2, sup = 3, dist="unif")),
N.run = 7500, debug = F, model = "spatialMixture",tempRE = "notcorr",
print.res = T, nBatch = 3,
parallel = F, nCluster = ncol(pi0))
mcmcChain = sptmRes2mcmc(ResGibbsMS)
gelman.diag(mcmcChain)
mcmcChain = sptmRes2mcmc(ResGibbsMS, c(187))
gelman.diag(mcmcChain)
nRun = nrow(ResGibbsM$GibbsOut$theta$rhoH)
predData = df$obs.data
predData$yP =  colMeans(ResGibbsMS$GibbsOut$yHat[-1,,1])
predData$CI025 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.025)
predData$CI975 = apply(ResGibbsMS$GibbsOut$yHat[-1,,1],2,quantile,0.975)
predData$yPp =  colMeans(predictSPTM(ResGibbsM, keepRun = round(4*nRun/5):nRun)$YpwN)
Cldf = data.frame(ID = rownames(pi0),Cluster = apply(t(apply(ResGibbsMS$GibbsOut$theta$zH[round(4*nRun/5):nRun,,,1],c(2,3),mean)),1,which.max))
predData = merge(predData, Cldf, by  ="ID", all.x = TRUE)
SSE_MS = sqrt(sum((predData$obs - predData$yP)^2))
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point() + geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
head(predData)
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point() + geom_line() +
#  geom_line(aes(x = date, y = yP, group = ID), col = "black") +
geom_segment(aes(x = date, xend = date, y = yP, yend = obs))+
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point() +
#  geom_line() +
#  geom_line(aes(x = date, y = yP, group = ID), col = "black") +
geom_segment(aes(x = date, xend = date, y = yP, yend = obs))+
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point() +
#  geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
geom_segment(aes(x = date, xend = date, y = yP, yend = obs))+
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point(size = 1) +
#  geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
geom_segment(aes(x = date, xend = date, y = yP, yend = obs))+
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
ggplot(data = predData[predData$Cluster %in% c(1:9),], aes(x = date, y = obs, col = ID)) + geom_point(size = 0.5) +
#  geom_line() +
geom_line(aes(x = date, y = yP, group = ID), col = "black") +
geom_segment(aes(x = date, xend = date, y = yP, yend = obs))+
#  geom_line(aes(x = date, y = yPp, group = ID), col = "red") +
facet_wrap(Cluster~ID, scales = "free") +
geom_ribbon(aes(ymin = CI025, ymax = CI975), fill = "grey70", col = "grey70", alpha = 0.2)
install.packages(c("bayesm", "broom", "haven", "hoardr", "pdftools", "RcppArmadillo", "readr", "readxl", "rmarkdown", "slam", "solrium", "units"))
